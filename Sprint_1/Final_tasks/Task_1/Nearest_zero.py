"""
############
ID: 54265536
############

Анализ:

Номера домов как таковые не важны, их я заменяю на двоичный вектор, где 0 - это дом '0' (т.е. пустота),
а 1 - это дом не '0'.

Получуив такой вектор, легко работать наглядно и с кодом: мы получаем отрезки ограниченные нулями.

Пусть исзодный список: [2, 7, 0, 8, 10, 20, 12, 0, 5, 8].

Тогда мы имеем три мночества:

1-ое: Все расстояния для домов слева от первого нуля всегда будут убывать до 1 (...3 2 1),
      для данного примера: [2, 1];

2-ое: Между нулей мы всегда будем получать палиндром, в данном примере [1, 2, 2, 1];

3-е: Все расстояния для домов справа от последнего нуля всегда будут возрастать, начиная от 1 (1 2 3 ...),
     для данного примера: [1, 2]
"""


def find_closest_zeroes(street_length, houses):
    result = list(range(street_length - 1, -1, -1))

    is_zero = False
    distance = 0

    for i, house in enumerate(houses):
        # Если встретился пустой участок.
        if house == 0:
            result[i] = 0

            # Если до пустого участка были дома.
            if is_zero and i > 0:
                for j in range(1, (distance // 2) + 1):
                    result[i - j] = j
            # Рассмотрения множества 1 (см. анализ).
            elif 0 < i < street_length - 1:
                for j in range(1, i + 1):
                    result[i - j] = j
            # После того как нашли пустой участок сохраняем, запоминаем, что он был и обнуляем счетчик.
            is_zero = True
            distance = 0

        # Иначе увеличиваем расстояние до пустого участка.
        # Если пустой участок не втречается, то последний элемент result автоматически получит свое расстояние до
        # ближайшего нуля.
        elif is_zero:
            distance += 1
            result[i] = distance

    return result


if __name__ == '__main__':
    street_length = int(input())

    # Двоичный вектор:
    # Если дом '0' -> 0 ~ False.
    # Иначе дом -> 1 ~ True.
    # Использую генератор, в итоге не используется дополнительная память для хранения двоичного вектора.
    houses = (0 if house == '0' else 1 for house in input().split())

    print(' '.join(map(str, find_closest_zeroes(street_length, houses))))
